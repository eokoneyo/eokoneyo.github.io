@use 'sass:math';
@use '../variables';
@use '../config/mq';

.container {
  &,
  &-fluid {
    margin: 0 auto;
    position: relative;
    width: 100%;
  }

  & {
    padding-left: mq.px2em(variables.$grid-gutter-size);
    padding-right: mq.px2em(variables.$grid-gutter-size);
  }

  @include mq.mq($from: tablet) {
    max-width: variables.$medium-grid-max-width;
  }

  @include mq.mq($from: desktop) {
    max-width: mq.px2em(variables.$large-grid-max-width);
  }

  @include mq.mq($from: wide) {
    max-width: mq.px2em(variables.$xlarge-grid-max-width);
  }
}

.row {
  display: flex;
  flex-wrap: wrap;

  .container > & {
    margin: 0 -#{mq.px2em(variables.$grid-gutter-size)};
  }

  .container-fluid > & {
    margin: 0 -#{mq.px2em(variables.$grid-gutter-size)};
  }

  & + & {
    margin-top: mq.px2em(10px);
  }

  .offset {
    @include mq.mq($from: mobile) {
      @for $i from 1 through variables.$grid-columns {
        &-sm-#{$i} {
          margin-left: math.div(100%, variables.$grid-columns) * $i;
        }
      }
    }

    @include mq.mq($from: tablet) {
      @for $i from 1 through variables.$grid-columns {
        &-md-#{$i} {
          margin-left: math.div(100%, variables.$grid-columns) * $i;
        }
      }
    }

    @include mq.mq($from: desktop) {
      @for $i from 1 through variables.$grid-columns {
        &-lg-#{$i} {
          margin-left: math.div(100%, variables.$grid-columns) * $i;
        }
      }
    }

    @include mq.mq($from: wide) {
      @for $i from 1 through variables.$grid-columns {
        &-xl-#{$i} {
          margin-left: math.div(100%, variables.$grid-columns) * $i;
        }
      }
    }
  }
}

.column {
  flex: 0 0 100%;
  max-width: 100%;

  @at-root [class*='column-'] {
    padding-left: mq.px2em(variables.$grid-gutter-size);
    padding-right: mq.px2em(variables.$grid-gutter-size);
    width: 100%;
    min-height: 1px;
  }

  @include mq.mq($from: mobile) {
    @for $i from 1 through variables.$grid-columns {
      &-sm-#{$i} {
        flex: 0 0 math.div(100%, variables.$grid-columns) * $i;
        max-width: math.div(100%, variables.$grid-columns) * $i;
      }
    }
  }

  @include mq.mq($from: tablet) {
    @for $i from 1 through variables.$grid-columns {
      &-md-#{$i} {
        flex: 0 0 math.div(100%, variables.$grid-columns) * $i;
        max-width: math.div(100%, variables.$grid-columns) * $i;
      }
    }
  }

  @include mq.mq($from: desktop) {
    @for $i from 1 through variables.$grid-columns {
      &-lg-#{$i} {
        flex: 0 0 math.div(100%, variables.$grid-columns) * $i;
        max-width: math.div(100%, variables.$grid-columns) * $i;
      }
    }
  }

  @include mq.mq($from: wide) {
    @for $i from 1 through variables.$grid-columns {
      &-xl-#{$i} {
        flex: 0 0 math.div(100%, variables.$grid-columns) * $i;
        max-width: math.div(100%, variables.$grid-columns) * $i;
      }
    }
  }
}
